type ArgValue = variant {
  I64 : int64;
  U64 : nat64;
  Vec : vec ArgValue;
  Slice : vec nat8;
  Text : text;
  True;
  False;
  Float : float64;
  Principal : principal;
};
type EventNodeRequest = record {
  name : text;
  args : vec record { text; ArgValue };
};
type EventRequest = record {
  name : text;
  nodes : vec EventNodeRequest;
};
type EventNode = record {
  name : text;
  cid : text;
  func_name : text;
  compensate_func_name : text;
  pre_node : text;
  next_node : text;
};
type EventLang = record {
  name : text;
  comment : text;
  owner : principal;
  time : nat64;
  nodes : vec EventNode;
};
type EventLangRequest = record {
  name : text;
  comment : text;
  nodes : vec EventNode;
};
type NodeLog = record {
  name : text;
  execute_status : bool;
  compensate_execute_status : bool;
};
type Log = record {
  logs : vec NodeLog;
};
type Logs = record {
  name : text;
  logs : vec Log;
};
type EventLogs = record {
  name : text;
  event_logs : vec Logs;
};
type UserEventLogs = record {
  user_logs : vec record { principal; EventLogs };
};

service : {
  get : (text) -> (opt EventLang) query;
  find : () -> (vec EventLang) query;
  insert : (EventLangRequest) -> (bool);
  delete : (text) -> (bool);
  execute : (EventRequest) -> (bool);
  test : (text, text, vec record { text; ArgValue }) -> (bool);
  find_log : (text) -> (vec Log) query;
}